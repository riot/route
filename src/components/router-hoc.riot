<router-hoc>
    <script>
      import {router} from '../'
      import {pure, __} from 'riot'
      import getCurrentRoute from '../get-current-route'
      import setBase from '../set-base'
      import {panic} from '@riotjs/util/misc'
      import {dashToCamelCase} from '@riotjs/util/strings'
      import initDomListeners from '../dom'

      const BASE_ATTRIBUTE_NAME = 'base'
      const INITIAL_ROUTE = 'initialRoute'
      const ON_STARTED_ATTRIBUTE_NAME = 'onStarted'
      const {template, bindingTypes} = __.DOMBindings
      const defer = window.requestAnimationFrame || window.setTimeout
      const cancelDefer = window.cancelAnimationFrame || window.clearTimeout


      let wasInitialized = false

      export default pure(({slots, attributes, props}) => {
        if (wasInitialized) panic('Multiple <router> components are not supported')

        const getAttribute = name => attributes && attributes.find(a => dashToCamelCase(a.name) === name)

        return {
          slot: null,
          el: null,
          teardown: null,
          mount(el, context) {
            const initialRouteAttr = getAttribute(INITIAL_ROUTE)
            const initialRoute = initialRouteAttr ? initialRouteAttr.evaluate(context) : null
            const currentRoute =  getCurrentRoute()
            const onFirstRoute = () => {
              this.createSlot(context)
              router.off.value(onFirstRoute)
            }
            wasInitialized = true

            this.el = el
            this.teardown = initDomListeners(this.root)

            this.setBase(context)

            // mount the slots only if the current route was defined
            if (currentRoute && !initialRoute) {
              this.createSlot(context)
            } else {
              router.on.value(onFirstRoute)
              router.push(initialRoute || window.location.href)
            }
          },
          createSlot(context) {
            if (!slots || !slots.length) return
            const onStartedAttr = getAttribute(ON_STARTED_ATTRIBUTE_NAME)

            this.slot = template(null, [{
              type: bindingTypes.SLOT,
              name: 'default'
            }])

            this.slot.mount(this.el, {
              slots
            }, context)

            if (onStartedAttr) {
              onStartedAttr.evaluate(context)(getCurrentRoute())
            }
          },
          update(context) {
            this.setBase(context)

            // defer the updates to avoid internal recoursive update calls
            // see https://github.com/riot/route/issues/148
            if (this.slot) {
              cancelDefer(this.deferred)

              this.deferred = defer(() => {
                this.slot.update({}, context)
              })
            }
          },
          unmount(...args) {
            this.teardown()
            wasInitialized = false

            if (this.slot) {
              this.slot.unmount(...args)
            }
          },
          getBase(context) {
            const baseAttr = getAttribute(BASE_ATTRIBUTE_NAME)

            return baseAttr ? this.el.getAttribute(BASE_ATTRIBUTE_NAME) || baseAttr.evaluate(context) : '/'
          },
          setBase(context) {
            setBase(props ? props.base : this.getBase(context))
          }
        }
      })
    </script>
</router-hoc>
