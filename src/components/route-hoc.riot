<route-hoc>
  <template if={state.route}>
    <slot route={state.route}/>
  </template>

  <script>
    import {route, toRegexp, match, router, createURLStreamPipe} from '../index.js'
    import getCurrentRoute from '../get-current-route.js'
    import {getLocation} from '../util.js'
    import compose from 'cumpa'

    const getInitialRouteValue = (pathToRegexp, path, options) => {
      const route = compose(
        ...createURLStreamPipe(pathToRegexp, options).reverse()
      )(path)

      return route.params ? route : null
    }

    export default {
      onBeforeMount(props) {
        const currentRoute = getCurrentRoute()
        const pathToRegexp = toRegexp(props.path, [], props)

        this.state = {
          pathToRegexp,
          route: currentRoute && match(currentRoute, pathToRegexp) ?
            getInitialRouteValue(pathToRegexp, currentRoute, props) :
            null
        }

        router.on.value(this.onBeforeRoute)
        this.stream = route(props.path, props).on.value(this.onRoute)
      },
      onBeforeRoute(path, pathToRegexp) {
        if (this.state.route && !match(path, this.state.pathToRegexp)) {
          this.callLifecycleProperty('onBeforeUnmount', route)
          this.update({
            route: null
          })
          this.callLifecycleProperty('onUnmounted', route)
        }
      },
      onRoute(route) {
        const loc = getLocation()

        this.callLifecycleProperty('onBeforeMount', route)
        this.update({route})
        if (route.hash) loc.hash = route.hash; // make browser scroll to fragment
        this.callLifecycleProperty('onMounted', route)
      },
      callLifecycleProperty(method, ...params) {
        if (this.props[method]) this.props[method](...params)
      },
      onUnmounted() {
        router.off.value(this.onBeforeRoute)
        this.stream.end()
      }
    }
  </script>
</route-hoc>
